Hello world!
Audio Handling
    We developed methods for embedding messages in audio files for OpenStego. We take advantage of existing methods in the program to compress and encrypt the message file we want to hide and then call our methods to take care of the hiding procedures. With our limited time we decided to focus on WAV and MP3 files as we wanted to hide data in compressed and uncompressed audio formats for the additional flexibility it provides. We succeeded in the implementation of both. However, there are some limitations found within the methods. 

WAV files are handled relatively simply as their uncompressed format makes them easier to work with. The bits from the message are hidden in the least significant bit of every set of 2 bytes in the WAV file, as it uses 2 bytes for a single data point. Even modifying a bit in every 2 bytes, we noticed no change in the resulting audio quality. That being said, we still spread the changed bits as much as possible to minimize potential artifacts. We found that modifications could be obvious when looking at the file with a hex editor and the beginning of the file often starts with several 0 value bytes so we set the minimum threshold that the byte could be modified to 2. A threshold of 1 cannot be used as a modification to the least significant bit can turn it into a 0, putting it below the threshold and corrupting the extracted data. If our plugin finds that there's not enough bytes above this threshold then it will set the threshold to 0 and inform the user that the message could only be inserted at the cost of higher risk of hidden data discovery.  Additionally, the modified bytes are spaced out using a random number generator to decide how many bytes should be between the previously modified byte and the next. This should make it substantially more difficult to detect that there is a hidden message in the file when analyzing the data. The encryption password is used as the RNG seed to ensure the same bytes are chosen on embedding and extracting the message. . We then proceed through the cover file and hide every bit from the secret message. This method is good in that it is capable of hiding relatively large messages in the cover file. This provides more flexibility for what can be hidden within the cover file. Moreover, the method used to conceal the message results in a fairly scrambled and spread out distribution of bits. This will make it harder for anyone who notices irregularities in the file to find the actual message and decode it. There are few drawbacks with this method but one would be the embedding of the data affects the actual audio data of the audio file very slightly distorting it. Although the changes are so little that we believe it to be practically impossible for anyone to discern the difference, it is always a risk and a possibility that it can be noticed.   

MP3 files are more complicated due to their compressed nature. They are composed of many data frames that can vary in length and quality within the file. This creates a problem for hiding data as small changes within the data of the frame can cause noticeable audio distortions and hiding messages of any meaningful length heavily degrades the sound quality. To this end we looked into the header of the frames. Each frame as a header that contains information about the data that follows. More importantly the header contains 3 bits that do not affect the playback of audio namely the copyright, private, and original bits. As such those bits can be modified without impacting the audio at all. Thus, to even an extremely sensitive listener, the hidden message cannot be detected at all. The drawback of this method is twofold. First, a deeper examination of a MP3’s headers will show that the bits do not match frame to frame, some will show the original bit set in the frame and some will not. This could lead to suspicion and further examination of the file as it generally isn’t common for an audio file to be different in copyright and originality in different portions of the same file. The second major drawback is the limited size of the message that can be hidden with this method as we are using a handful of bits per  thousands of bytes. However, within the time frame we had to complete the project this seems an adequate method of hiding the message and will hopefully inspire further improvement in the algorithm after the completion of this project. 


Further conceptualized data hiding techniques for WAV Steganography
We had quite limited time to research and implement our solution and we have some ideas that would have enhanced our data hiding with WAV files. First is choosing the best locations to insert our bits such that the average user would have the least chance of noticing an oddity in the audio. We have conceptualized a method of doing this that requires a bit of background. The human ear interprets sound volume logarithmically. In essence, this means that a small change in volume when the sound is quiet is significantly more noticeable than a small change in volume when the sound is loud. To get the volume from out WAV file we must split the file into many small chunks. It is important to note that a single data point in a WAV file cannot have a volume; a chunk of data must at least be one full wavelength as the volume is the amplitude of the wave. Once we have a chunk, we can calculate the volume with the decibel formula:
db = 10log­­­10 (average amplitude / 32768)
Once this is calculated for every chunk, you can pick the chunks with the highest values to store your bits in. As for which bit to change within a chunk, you have the choice of choosing the highest and lowest bits, or the bits in between. Changing the highest and lowest bits will very slightly change the amplitude and therefore the volume. Changing the in between bits will very slightly change how it sounds. We were unable to reach testing for this part, so we do not know which is superior. We believe changing the bits that affect amplitude might be best for the logarithmic hearing reasons above.
 
We have also conceptualized a similarity check for comparing the original audio file to the newly created steganography file. Our method consists of splitting the files into chunks and checking the loudness as described previously. Once you have split both files in the same chunks as each other, get the loudness of both chunks in decibels and take the absolute value of both values subtracted from each other. This will give you how different in loudness the chunks are as a positive value. Because of the logarithmic nature of the decibel scale, the same change will produce a smaller difference when in a louder portion of the audio file as opposed to a quieter portion. This is just like the volume scale of the human ear. Because of this, getting the absolute difference of loudness produces the result of how much a human will be able to detect the change. Summing this resulting value for every chunk in the audio file will produce a score of how different the produced steganography file is from the original. Testing would need to be done to determine what is a “good” and “bad” score.

Preliminary Research

Our project is focused on enhancing OpenStego, an open source steganography program, so that it can effectively hide data in audio and video files. Very few steganography programs exist to embed data in image, audio, and video files. Of these, many have not been updated to work on modern systems. This document will outline some of the programs that currently exist to embed messages in audio or video and how we will use this information to enhance OpenStego. 
 
Enshroud by vibhusehra: Audio
    A relatively simple audio steganography project that only works with uncompressed .wav files. It encrypts the message with RSA and disperses the message in the least significant bit of each byte sequentially throughout the audio file. The result was rather unimpressive, with the sample audio file given the output audio containing the secret message had a noticeable slight ringing at the very beginning which was meant to be almost silent. The slight ringing also abruptly stops shortly into the playback of the audio, which is clearly the end of the encoded message. If we encounter this issue then here are some workarounds we can try: first we can disperse the data more evenly throughout the file instead of frontloading it, second we could try to only insert bits at the louder points in the audio, although this could prove to be tough to get it to work with decoding the message.


Video-Steganography by Amritaryal44: video
    A video steganography used for hiding videos inside other videos. It takes 2 .mp4 videos and uses OpenCV to pull each frame then takes the most significant 2 bits of every byte in the messages frame and inserts them into the 2 least significant bits of the actual video. It then takes the next 2 most significant bits of the message frame and inserts them into the 2 least significant bits into a copy of the same actual video frame. This duplicates every frame but to fix this they doubled the framerate of the resulting video. The resulting video is an uncompressed .mkv file with no noticeable changes in their example. This seems like a good example to consider when initially making our video steganography program. Unfortunately, uncompressed video is almost never sent over the internet and is therefore not entirely practical for steganography. 

Steghide: audio
    This program has the capability of hiding data in audio and image files through a “graph-theoretic” approach. The data is compressed, encrypted, and a series of positions generated with the passphrase. The audio samples at those positions are then set to the values corresponding with the data to hide. Pairs are then found within the file and swapped around. 
    The solution appears to be effective, the data would be hidden thoroughly in the file and would be almost impossible to recover without the passphrase and a copy of Steghide. The main drawback I see in this is its complexity. After looking at the source code and reading the documentation I still find the methods to be above my head and it would take a significant amount of time to come up to speed on the aforementioned graph-theoretic approach. Furthermore the complexity has a significant risk of introducing errors and the number of moving parts would make coding and debugging a very slow process, potentially too slow for our projects time scales. 
That said, If we can get this working for our project I believe it would be robust and effective at achieving our goal of enhancing OpenStego. It would be wise to implement the much easier standard LSB method for uncompressed and lossless compressed audio files and then look into this more complex implementation. Moreover, it is likely the method could be adapted for video formats following a similar pattern to the audio. 

Mp3stegz: compressed audio
As the name implies, this program has an implementation of embedding data within compressed mp3 files. This program works of the premise that there are several frames that contain several bytes that make up an audio file.  As a result, this jumps from frame to frame and modifies each one a slight bit. Modified frames are flagged with several characters before bytes are written. The first frame gets the verification and extension, the next frame some of the data, and on and on until there is no more data to hide. To Retrieve the data the program scans for the first flag, then subsequent flags and constructs the message from the resulting bytes. 
This seems like an elegant enough solution to compressed audio steganography as it prevents the data from being bunched up and creating large and noticeable errors in the audio file. However, there are drawbacks to this method. As we are replacing bytes from the original audio file larger messages become impossible to realistically hide. We’d either run out of frames to modify or be forced to modify the existing frames to such an extent the audio quality would be noticeably impacted, possibly drawing attention to the fact the file had been modified in some way. 
This method would work for what we want to implement. We’d need to effectively scan the audio file and identify the frames, the size of each frame, and how many bytes are available to be modified. Longer messages could be compressed to a certain extent to maximize use of available space. We’d also need to look into how much we can modify before the audio quality begins to degrade.    

Stegostick: audio, video
This claims to have a solution for embedding messages in audio and video files with .wav and .mpg file formats. This program creates a new file and copies data byte by byte. To hide data, this writes the header to the new file, copies the verification details, the hidden file extension, and the secret data. Following this, the rest of the originals files data is copied into the new file. To read the secret data, the header is skipped, the verification details checked, and the data copied.
    I am unsure if this is an appropriate method of hiding the data effectively. While it is undoubtedly simple in its implementation I feel that it is also the most obvious as larger hidden files could create noticeable anomalies in the resulting file. As the goal of steganography is to make the secret data as inconspicuous as possible this is an obvious drawback. 
This method could work with a bit of modification. To make the data properly hidden we would likely need to modify the header itself so that the hidden data bytes are skipped and the file plays from the start of the actual audio/video data. I am unsure of how exactly we would need to modify the header and it may be outside of the scope of this project.     



Security on GIF Images Using Steganography with LSB Method, Spread Spectrum and the Vigenere Cipher by Andika Amirulhaqi, Tito Waluyo Purboyo, and Ratna Astuti Nugrahaeni: GIF
    This paper focuses on storing a message in GIF files. GIFs use lossless compression making it much easier to use a LSB method for hiding data. The paper also goes into detail about effectively spreading out the data to make it less noticeable using the Spread Spectrum method. This method entails creating pseudorandom noise in data and embedding your secret message into it. It’s used to make it extremely difficult to detect if there is a secret message embedded in a file. It can be used on many different file types, not just images, so this method could prove useful for our project. It’s debatable if GIFs are considered videos for the purpose of our project, but if they are then we think this paper could be appropriate for the basis of a GIF steganography implementation. 


The Hill reporter Sharyl Attkisson has suggested that the White House could use hologram technology to help Joe Biden deliver public speeches.

According to Atkinson, officials within the administration are “mulling over farfetched speculation that, upon further examination, starts to look almost like it is not completely outside the realm of the possible.”

The journalist highlighted how AI and deepfake technology is becoming so indistinguishable from reality, that it can “make people who didn’t say or do something look very much like they said or did the thing.”

“Some years ago, a government source with access to intelligence at the highest levels explained to me — without divulging any classified information — that any technological thing we can imagine is actually being researched or accomplished in the secret channels of our government. And, he told me, things that are beyond our ability to imagine also are being done,” wrote Atkinson.

“Joe Biden isn’t a hologram. But if he wanted to be, and if powerful people with access to the latest technology wanted to make him one, it seems as though there might be little they couldn’t accomplish,” she concludes.

Biden has yet to take part in a press conference or address the nation, although he is set to do that tomorrow to mark the one year anniversary of the coronavirus shutdown.

The 78-year-old’s habit of stumbling through sentences and forgetting words and names has left staffers keen to keep Biden away from reporters.

As we highlighted yesterday, Biden’s handlers almost had panic attacks when journalists began asking him questions during a visit to a hardware store in DC.

Meanwhile, Kamala Harris has been handling important phone calls with foreign leaders, a task normally undertaken by the president.

A Rasmussen poll found that half of Americans now have questions regarding Joe Biden’s physical and mental fitness, while more than half are concerned about the fact that he has not held a press conference for almost 50 days now.